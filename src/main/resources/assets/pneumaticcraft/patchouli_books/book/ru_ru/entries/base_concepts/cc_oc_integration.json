{
  "name": "Computer Integration",
  "icon": "pneumaticcraft:textures/patchouli/computer.png",
  "category": "pneumaticcraft:base_concepts",
  "flag": "|mod:computercraft,mod:opencomputers",
  "pages": [
    {
      "type": "text",
      "text": "Когда установлен $(thing)ComputerCraft/$ или $(thing)Open Computers/$, вы сможете взаимодействовать с практически всеми $(pncr) машинами и $(l:machines/drone_interface)Дронами/$.$(p)Любые из перечисленных здесь машин могут быть использованы в качестве периферийных устройств для CC/OC."
    },
    {
      "type": "text",
      "title": "ComputerCraft",
      "text": "На языке Lua вы можете использовать $(thing)m = peripheral.wrap(<side>)/$, где $(thing)<side>/$ - это сторона компьютера, к которой подключено периферийное устройство (верх, низ, лево, право, зад, перед). Затем вы можете использовать любую из следующих функций с $(thing)m.<functionName>/$.$(p)Везде, где '<side>' встречается в аргументах, допустимы следующие значения: 'up', 'down', 'north', 'south', 'east', 'west'.",
      "flag": "mod:computercraft"
    },
    {
      "type": "text",
      "title": "Open Computers",
      "text": "Для подключения вашего компьютера к $(pnc) машинам вам понадобится использовать $(item)Adapter/$. После этого они будут отображаться как компоненты OC, которые можно просмотреть, запустив $(thing)=components.list()/$ в среде OC Lua. Затем можно использовать любую из следующих функций, например, $(thing)p = components.air_compressor.getPressure()/$ вернет текущее давление подключенного $(item)Компрессора воздуха/$.",
      "flag": "mod:opencomputers"
    },
    {
      "type": "text",
      "title": "Общие методы",
      "text": "Следующие методы общие для $(italic)всех/$ $(pncr) машин:$(li)$(#800)getPressure(), getPressure(<side>)/$: получить давление машины. <side> необязателен, он полезен только для $(l:machines/vacuum_pump)Помпы для откачки вакуума/$, у которой давление зависит от стороны.$(li)$(#800)getDangerPressure()/$: получить давление, при котором машина подвергается риску взрыва$(li)$(#800)getCriticalPressure()/$: получить максимальное давление, при котором машина обязательно взорвется."
    },
    {
      "type": "text",
      "title": "Методы, связанные с теплом",
      "text": "Следующие методы общие для $(italic)всех/$ $(pncr) машин, поддерживающих понятие $(l:base_concepts/heat)Тепла/$:$(li)$(#800)getTemperature(), getTemperature(<side>)/$: получить температуру машины. <side> необязателен, он полезен только для $(l:machines/vortex_tube)Вихревой трубы/$, у которой температура различается в зависимости от стороны."
    },
    {
      "type": "spotlight",
      "anchor": "air_cannon",
      "item": "pneumaticcraft:air_cannon",
      "text": "$(li)$(#800)setExternalControl(<true/false>)/$: Когда включено, это предотвратит поворот пушки обычными способами (вставка инструментов GPS, изменение модификаторов дальности и т.д.).$(li)$(#800)setTargetLocation(<x>,<y>,<z>)/$: Направляет пушку на заданное местоположение цели вместо той, которая была сохранена в инструменте GPS."
    },
    {
      "type": "text",
      "title": "Пневматическая пушка (продолжение)",
      "text": "$(li)$(#800)setRotationAngle(<angle>)/$: Поворачивает пушку по горизонтали на указанный угол.$(li)$(#800)setHeightAngle(<angle>)/$: Поворачивает пушку по вертикали на указанный угол.$(li)$(#800)isDoneRotating()/$: Возвращает true, когда пушка закончила поворот.$(li)$(#800)getMinWorkingPressure()/$: Возвращает минимальное давление, необходимое для выстрела из пушки (желто-зеленый порог в пользовательском интерфейсе)."
    },
    {
      "type": "text",
      "title": "Пневматическая пушка (продолжение)",
      "text": "$(li)$(#800)fire()/$: Стреляет из пушки при наличии достаточного давления и вставленных предметов. Возвращает true в случае успешного выстрела."
    },{
      "type": "spotlight",
      "anchor": "elevator",
      "item": "pneumaticcraft:elevator_base",
      "title": "Лифт",
      "text": "$(li)$(#800)setExternalControl(<true/false>)/$: Когда включено, устанавливает $(#f00)режим красного камня/$ для Лифта в режим 'Вызов Лифта', который также подходит для управления с помощью компьютера. Вы не должны устанавливать этот режим перед вызовом $(#800)setTargetHeight()/$; этот метод автоматически переключит Лифт во внешний контроль."
    },
    {
      "type": "text",
      "title": "Лифт (продолжение)",
      "text": "$(li)$(#800)getMinWorkingPressure()/$: Получить минимальное давление, необходимое для расширения Лифта. Опускание Лифта бесплатно.$(li)$(#800)setTargetHeight(<height>)/$: Устанавливает целевую высоту Лифта на заданное значение (в метрах/блоках, число с плавающей запятой).$(li)$(#800)getTargetHeight()/$: Получить целевую высоту Лифта (в метрах/блоках, число с плавающей запятой).$(li)$(#800)getCurrentHeight()/$: Получить текущую высоту Лифта (в метрах/блоках, число с плавающей запятой)."
    },
    {
      "type": "text",
      "title": "Лифт (продолжение)",
      "text": "$(li)$(#800)getVelocity()/$: Получить текущую скорость Лифта в блоках за тик (где 20 тиков в секунду). Отрицательные значения указывают на то, что Лифт спускается."
    },
    {
      "type": "spotlight",
      "anchor": "universal_sensor",
      "item": "pneumaticcraft:universal_sensor",
      "text": "$(li)$(#800)getSensorNames()/$: Возвращает таблицу всех известных имён датчиков.$(li)$(#800)getSensor()/$: Возвращает имя текущего выбранного датчика."
    },
    {
      "type": "text",
      "title": "Универсальный датчик (продолжение)",
      "text": "$(li)$(#800)setSensor(<sensorName>), setSensor(<index>), setSensor()/$: Устанавливает текущий выбранный датчик. <sensorName> - одно из имен, возвращаемых функцией $(#800)getSensorNames()/$. <index> - это индекс в возвращаемой таблице из $(#800)getSensorNames()/$. Если вызывается без аргументов, $(#800)setSensor()/$, то датчик не будет выбран (машина перейдет в режим ожидания и не будет использовать воздух). Возвращает true, если датчик возможен с текущими установленными модификаторами."
    },
    {
      "type": "text",
      "title": "Универсальный датчик (продолжение)",
      "text": "$(li)$(#800)setTextField(<text>)/$: Некоторые датчики используют текстовое поле для указания дополнительных параметров (например, датчик 'Сущности в радиусе' принимает строку $(l:base_concepts/entity_filter)фильтра сущностей/$). Вы можете указать желаемый текст здесь.$(li)$(#800)getTextField()/$: Возвращает текст, который в настоящее время хранится в $(thing)Универсальном датчике/$."
    },
    {
      "type": "text",
      "title": "Универсальный датчик (продолжение)",
      "text": "$(li)$(#800)isSensorEventBased()/$: Существуют две категории датчиков: событийные и опросные. Событийные датчики ожидают, когда что-то произойдет (например, атака игрока, поднятие предметов). Опросные датчики периодически проверяют состояние (сущности в радиусе, мировое время, датчик дождя). Эта функция возвращает true, если текущий выбранный датчик является опросным."
    },
    {
      "type": "text",
      "title": "Универсальный датчик (продолжение)",
      "text": "$(li)$(#800)getSensorValue()/$: Если текущий датчик - опросный, возвращает (неинвертированный) сигнал красного камня, который он бы выдал. Обратите внимание, что установка датчика и немедленное получение результата может быть ненадежным, так как многие опросные датчики проверяют состояние редко из-за причин производительности. Поэтому этот метод вызывает событие-перетаскивание; получите результат в ответ на это событие. Если не выбран ни один опросный датчик, будет сгенерировано исключение."
    },
    {
      "type": "text",
      "title": "Универсальный датчик (продолжение)",
      "text": "$(li)$(#800)getMinWorkingPressure()/$: Возвращает минимальное давление, необходимое для работы Универсального датчика (желто-зеленый порог в пользовательском интерфейсе).$(li)$(#800)setGPSToolCoordinate(<slotIndex>,<x>,<y>,<z>)/$: Устанавливает местоположение"
    }
    
  ]
}




