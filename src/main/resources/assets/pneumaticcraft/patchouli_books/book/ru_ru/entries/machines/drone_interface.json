
  {
    "name": "Интерфейс Дрона",
    "icon": "pneumaticcraft:drone_interface",
    "category": "pneumaticcraft:machines",
    "flag": "|mod:computercraft,mod:opencomputers",
    "advancement": "pneumaticcraft:printed_circuit_board",
    "pages": [
      {
        "type": "text",
        "text": "Интерфейс Дрона - это $(thing)периферийное устройство ComputerCraft/OpenComputers/$, которое используется для взаимодействия с $(l:tools/drone)Дронами/$. Для этого необходимо запрограммировать $(item)Дрон/$ с помощью головоломки $(l:programming/computer_control)Управление компьютером/$.$(p)Когда Дрон выполняет головоломку Управление компьютером, он попытается подключиться к $(ttcolor)$(t:Интерфейсу Дрона можно подключить только один Дрон за раз)доступному/$ $(item)Интерфейсу Дрона/$, расположенному в пределах области головоломки."
      },
      {
        "type": "spotlight",
        "item": "pneumaticcraft:drone_interface",
        "text": "После подключения Дрон будет полностью управляться интерфейсом, а именно, с помощью методов Lua, вызываемых интерфейсом контролирующим компьютером.$(p)Интерфейс Дрона предоставляет длинный список методов Lua, которые все описаны на следующих страницах."
      },
      {
        "type": "text",
        "title": "Пример",
        "text": "Пример программы на Lua:$(br)$(#008)m = peripheral.wrap(\"right\")$(br)m.addArea(100, 64, 100, 120, 4, 120, \"Filled\")$(br)m.setAction(\"dig\")$(br)while not m.isActionDone()$(br)do$(br)  sleep(1)$(br)end$(br)m.clearArea()$(br)m.addArea(80, 65, 80)$(br)m.setAction(\"goto\")$(br)-- ждать завершения, как указано выше$(br)m.setAction(\"standby\")$(p)/$заставляет дрона выкопать большую область - все блоки в диапазоне (100,64,100)->(120,4,120) - а затем вернуться в точку (80, 65, 80) и перейти в режим ожидания."
      },
      {
        "type": "text",
        "title": "Пример (продолжение)",
        "text": "Вы можете заметить, что приведенная выше программа должна явно ждать, пока действия Dig (и Goto) будут выполнены, в отличие от написания программ для Дронов с помощью $(l:programming/programmer)Программиста/$. Это происходит потому, что ваша программа на компьютере Lua выполняется в отдельном потоке и не может взаимодействовать с миром напрямую; она просто сообщает дрону, что делать дальше, и должна спрашивать дрона, закончил ли он уже."
      },
      {
        "type": "text",
        "title": "abortAction()",
        "text": "$(#800)abortAction()/$$(p)Останавливает текущее выполняемое действие."
      },
      {
        "type": "text",
        "title": "addArea()",
        "text": "$(#800)addArea(<x1>,<y1>,<z1>)/$$(p)$(#800)addArea(<x1>,<y1>,<z1>,<x2>,<y2>,<z2>,<areaType>)/$$(p)Добавляет область к текущей сохраненной области Дрона. При использовании последнего метода x1/y1/z1 представляют собой первую точку (которая будет P1 инструмента $(l:tools/gps_area_tool)GPS Area/$), а x2/y2/z2 представляют вторую точку или P2 инструмента GPS Area.$(p)Можно использовать getAreaTypes() для вывода списка допустимых типов областей."
      },
      {
        "type": "text",
        "text": "$(#800)addBlacklistItemFilter(<item/block name>, <useNBT>, <useModSimilarity>)/$$(p)Аналогично addWhitelistItemFilter(...), но для добавления элементов в черный список.",
        "title": "addBlacklistItemFilter()"
      },
      {
        "type": "text",
        "title": "addBlacklistLiquidFilter()",
        "text": "$(#800)addBlacklistLiquidFilter(<liquid name>)/$$(p)Аналогично addWhitelistLiquidFilter(...), но для добавления жидкостей в черный список."
      },
      {
        "type": "text",
        "title": "addBlacklistText()",
        "text": "$(#800)addBlacklistText(<text>)/$$(p)Добавляет текст в черный список. Используется для указания фильтрации для действия \"entity_attack\", например."
      },
      {
        "type": "text",
        "text": "$(#800)addWhitelistItemFilter(<item/block name>, <useNBT>, <useModSimilarity>)/$$(p)Действует как виджет $(l:programming/item_filter)Фильтра предметов/$ справа от другого виджета. Имя предмета/блока - это регистрационное имя, например $(thing)pneumaticcraft:pressure_tube/$. Параметры 'useXXX' - это логические значения, которые определяют, какие фильтры будут использованы (как в графическом интерфейсе виджета Фильтра предметов).",
        "title": "addWhitelistItemFilter()"
      },
      {
        "title": "addWhitelistLiquidFilter()",
        "text": "$(#800)addWhitelistLiquidFilter(<liquid name>)/$$(p)Действует так, как если бы вы добавили кусочек $(l:programming/liquid_filter)Фильтра жидкости/$ справа от кусочка. Вы должны предоставить регистрационное имя жидкости (например, $(thing)minecraft:water/$).",
        "type": "text"
      },
      {
        "text": "$(#800)addWhitelistText(<text>)/$$(p)Добавляет текст в список разрешенных текстов. Это используется для указания фильтра сущностей для действия \"entity_attack\", например.",
        "type": "text",
        "title": "addWhitelistText()"
      },
      {
        "title": "clearArea()",
        "type": "text",
        "text": "$(#800)clearArea()/$$(p)Очищает текущую сохраненную область."
      },
      {
        "title": "clearBlacklistItemFilter()",
        "type": "text",
        "text": "$(#800)clearBlacklistItemFilter()/$$(p)Очищает все сохраненные фильтры элементов в черном списке."
      },
      {
        "title": "clearBlacklistLiquidFilter()",
        "text": "$(#800)clearBlacklistLiquidFilter()/$$(p)Очищает все сохраненные фильтры жидкостей в черном списке.",
        "type": "text"
      },
      {
        "text": "$(#800)clearBlacklistText()/$$(p)Очищает все сохраненные тексты в черном списке.",
        "type": "text",
        "title": "clearBlacklistText()"
      },
      {
        "title": "clearWhitelistItemFilter()",
        "text": "$(#800)clearWhitelistItemFilter()/$$(p)Очищает все сохраненные фильтры элементов в белом списке.",
        "type": "text"
      },
      {
        "type": "text",
        "text": "$(#800)clearWhitelistLiquidFilter()/$$(p)Очищает все сохраненные фильтры жидкостей в белом списке.",
        "title": "clearWhitelistLiquidFilter()"
      },
      {
        "title": "clearWhitelistText()",
        "text": "$(#800)clearWhitelistText()/$$(p)Очищает все сохраненные тексты в белом списке.",
        "type": "text"
      },
      {
        "title": "evaluateCondition()",
        "text": "$(#800)evaluateCondition()/$$(p)Возвращает true/false. Используется только в $(l:programming/conditions)условиях/$. Будет возвращать true/false в зависимости от того, удовлетворено ли условие или нет. Условия Дрона можно проверить сразу после установки $(#800)setAction()/$, но для условий, не связанных с Дроном, необходимо дождаться, пока $(#800)isActionDone()/$ вернет true, прежде чем результат $(#800)evaluateCondition()/$ будет полезен.",
        "type": "text"
      },
      {
        "type": "text",
        "text": "$(#800)exitPiece()/$$(p)Останавливает $(thing)Головоломку управления компьютером/$ в Дроне и позволяет программе Дрона перейти к следующей головоломке в его программе.",
        "title": "exitPiece()"
      },
      {
        "type": "text",
        "title": "forgetTarget()",
        "text": "$(#800)forgetTarget()/$$(p)Когда Дрон нацелен на какую-либо сущность (при использовании действия \"entity_attack\"), это прекратит атаку этой цели."
      },
      {
        "text": "$(#800)getAction()/$$(p)Возвращает строку, представляющую последнее установленное действие с помощью $(#800)setAction()/$. Будет возвращать $(thing)nil/$, когда действие не установлено. Может быть использовано, чтобы убедиться, что вызывается $(#800)isActionDone()/$ только тогда, когда этот метод не возвращает nil.",
        "type": "text",
        "title": "getAction()"
      },
      {
        "title": "getAllActions()",
        "type": "text",
        "text": "$(#800)getAllActions()/$$(p)Возвращает таблицу всех текущих доступных действий (например, $(thing)pneumaticcraft:dig/$ или $(thing)pneumaticcraft:place'/$). Каждое из этих действий соответствует прямо доступным программированиям виджетам в $(l:programming/programmer#ids)графическом интерфейсе Программиста/$.$(p)Примечание: для действий, начинающихся с $(thing)pneumaticcraft:/$ (что соответствует всем стандартным действиям), префикс $(thing)pneumaticcraft:/$ является необязательным."
      },
      {
        "title": "getAreaTypes()",
        "text": "$(#800)getAreaTypes()/$$(p)Возвращает таблицу всех возможных типов областей (filled, frame, sphere...)",
        "type": "text"
      },
      {
        "title": "getDronePosition()",
        "text": "$(#800)getDronePosition()/$$(p)Возвращает позицию Дрона x/y/z. Этот метод здесь для исторической совместимости, и рекомендуется вместо него использовать новый метод $(#800)getDronePositionVec()/$.",
        "type": "text"
      },
      {
        "title": "getDronePositionVec()",
        "text": "$(#800)getDronePosition()/$$(p)Возвращает таблицу с координатами x/y/z Дрона. Индивидуальные значения могут быть легко извлечены с помощью полей .x, .y и .z, например, $(#800)xpos = getDronePosition().x/$.",
        "type": "text"
      },{
        "title": "getUpgrades()",
        "type": "text",
        "text": "$(#800)getUpgrades(<upgrade>)/$$(p)Получает количество вставленных улучшений заданного типа.$(p)Имя улучшения можно найти, наведя курсор на любой предмет с улучшением PneumaticCraft с включенной расширенной информацией (F3+H) и удалив часть имени предмета с частью '_upgrade'.$(p)Например, для $(thing)pneumaticcraft:speed_upgrade/$ имя будет \"speed\"."
      },
      {
        "type": "text",
        "title": "getVariable()",
        "text": "$(#800)getVariable(<variable name>)/$$(p)Возвращает значение переменной из этого Дрона (x, y и z). Возможно получение $(l:programming/variables#global)глобальных/$ переменных (с префиксом #) и $(l:programming/variables#special)специальных/$ переменных (с префиксом $)."
      },
      {
        "type": "text",
        "title": "hideArea()",
        "text": "$(#800)hideArea()/$$(p)Останавливает выделение области, сохраненной в Дроне, как показано с помощью $(#800)showArea()/$."
      },
      {
        "type": "text",
        "title": "isActionDone()",
        "text": "$(#800)isActionDone()/$$(p)Возвращает true, если текущее действие завершено (например, \"goto\" прибыл в целевую точку, \"inventory import\" больше не может импортировать, \"dig\" выкопал каждый возможный блок...)"
      },
      {
        "type": "text",
        "title": "isConnectedToDrone()",
        "text": "$(#800)isConnectedToDrone()/$$(p)Возвращает true, если Дрон подключился к этому интерфейсу Дрона (когда программа Дрона достигла куска ComputerCraft и установила соединение)."
      },
      {
        "type": "text",
        "title": "removeArea()",
        "text": "$(#800)removeArea(<x1>,<y1>,<z1>,<x2>,<y2>,<z2>,<areaType>)/$$(p)Удаляет область из текущей сохраненной области (эквивалентно добавлению области в черный список)."
      },
      {
        "type": "text",
        "title": "setAction()",
        "text": "$(#800)setAction(<action>)/$$(p)Устанавливает действие для Дрона. Должно быть одним из действий, возвращаемых $(#800)getAllActions()/$; эти действия соответствуют прямо программным виджетам в $(l:programming/programmer)графическом интерфейсе Программиста/$, который показывает имя действия в подсказках виджетов при переключении F3+H.$(p)Обратите внимание, что префикс $(thing)pneumaticcraft:/$ является необязательным для действий, начинающихся с этого префикса."
      },
      {
        "type": "text",
        "title": "setBlockOrder()",
        "text": "$(#800)setBlockOrder(<\"closest\"/\"highToLow\"/\"lowToHigh\">)/$$(p)Устанавливает порядок размещения/выемки для Дрона."
      },
      {
        "type": "text",
        "title": "setCanSteal()",
        "text": "$(#800)setCanSteal(<true/false>)/$$(p)Когда используется действие \"pickup_item\", это определяет, разрешено ли дронам кража предметов, которые они обычно должны оставить (например, предметы на конвейере $(thing)Immersive Engineering/$).$(p)По умолчанию 'false': дроны не будут пытаться красть предметы."
      },
      {
        "type": "text",
        "title": "setCheckLineOfSight()",
        "text": "$(#800)setCheckLineOfSight(<true/false>)/$$(p)Когда используется действие \"entity_attack\", это определяет, будут ли дроны атаковать любую цель в своей области или только тех целей, к которым у них есть прямая видимость.$(p)По умолчанию 'false': проверка прямой видимости не выполняется."
      },
      {
        "type": "text",
        "title": "setCount()",
        "text": "$(#800)setCount(<amount>)/$$(p)Настроивает максимальное количество предметов, обрабатываемых действиями импорта/экспорта/выпадения, а также используется для количества, которое проверяется в условиях."
      },
      {
        "type": "text",
        "title": "setCraftingGrid()",
        "text": "$(#800)setCraftingGrid(<item/block name>, <item/block name>, ...(9x))/$$(p)Настройка сетки крафта, чтобы при использовании действия \"crafting\" использовался этот рецепт. Необходимо указать все 9 предметов, составляющих рецепт; для пустых мест предоставьте $(thing)nil/$. Формат имен предметов такой же, как для фильтров предметов."
      },
      {
        "type": "text",
        "title": "setDropStraight()",
        "text": "$(#800)setDropStraight(<true/false>)/$$(p)Когда текущим действием является \"drop_item\", это определяет, будет ли предмет сбрасываться со случайной скоростью (как у обычного Dropper) или вертикально вниз."
      },
      {
        "type": "text",
        "title": "setEmittingRedstone()",
        "text": "$(#800)setEmittingRedstone(<strength>)/$$(p)Устанавливает силу сигнала красного камня для излучения, когда текущим действием является \"emit_redstone\"."
      },
      {
        "type": "text",
        "title": "setIsAndFunction()",
        "text": "$(#800)setIsAndFunction(<true/false>)/$$(p)Используется только в условиях. Когда true, все проверяемые блоки должны удовлетворять требованиям условия (>=10 и т.д.)."
      },
      {
        "type": "text",
        "title": "setMaxActions()",
        "text": "$(#800)setMaxActions(<amount>)/$$(p)Устанавливает максимальное количество действий, выполняемых на блоках, прежде чем действие будет считаться 'завершенным'. Это применяется к действиям \"place\", \"dig\" и \"block_right_click\". Обязательно также вызовите $(#800)setUseMaxActions(true)/$ для включения использования этого параметра."
      },
      {
        "type": "text",
        "text": "$(#800)setOperator(<\"=\" / \">=\" / \"<=\">)/$$(p)Используется только в условиях. Определяет, проверяет ли условие равное количество (=), равное или большее количество (>=) или равное или меньшее количество (<=). Количество можно установить с помощью $(#800)setCount()/$.",
        "title": "setOperator()"
      },
      {
        "title": "setPlaceFluidBlocks()",
        "type": "text",
        "text": "$(#800)setPlaceFluidBlocks(<true/false>)/$$(p)Используется только в действии \"liquid_export\"; если установлено значение true, Дрону будет разрешено размещать жидкостные блоки в мире. По умолчанию 'false': разрешено экспортировать жидкости только в жидкостные резервуары."
      },
      {
        "title": "setRenameString()",
        "text": "$(#800)setRenameString(<name>)/$$(p)Устанавливает имя, которым будет назван Дрон, когда используется действие \"rename\".",
        "type": "text"
      },{
        "type": "text",
        "title": "setRequiresTool()",
        "text": "$(#800)setRequiresTool(<true/false>)/$$(p)Это настраивает, требуется ли Дрону инструмент при выполнении действий \"dig\" и \"harvest\". Без инструмента Дрон не будет пытаться выполнять эти действия."
      },
      {
        "type": "text",
        "title": "setRightClickType()",
        "text": "$(#800)setRightClickType(\"click_item\" / \"click_block\")/$$(p)Когда текущим действием является \"block_right_click\", это определяет, должен ли дрон использовать логику клика своего удерживаемого предмета (например, использовать $(item)кремень и сталь/$) или пытаться активировать выбранный блок (например, повернуть $(item)рычаг/$). По умолчанию установлено \"click_item\"."
      },
      {
        "type": "text",
        "title": "setSide()",
        "text": "$(#800)setSide(<side>, <accessible>)/$$(p)Устанавливает, является ли определенная сторона доступной или нет. Используется в действиях \"inventory_import\" и \"inventory_export\" для установки стороны инвентаря, к которой Дрон может получить доступ. Также используется в действии \"place\" для определения способа размещения блока."
      },
      {
        "title": "setSides()",
        "text": "$(#800)setSides(<down>, <up>, <north>, <south>, <east>, <west>)/$$(p)То же, что и выше, но в одном методе для установки всех сторон одновременно; этот метод принимает шесть логических параметров.",
        "type": "text"
      },
      {
        "type": "text",
        "title": "setSignText()",
        "text": "$(#800)setSignText(<line1>, <line2>, ..., <lineN>)/$$(p)Устанавливает текст, который будет отправлен на таблички и плиты с афоризмами, когда используется действие $(thing)edit_sign/$."
      },
      {
        "title": "setSneaking()",
        "text": "$(#800)setSneaking(<true/false>)/$$(p)Используется только в действии \"block_right_click\"; это устанавливает, будет ли фиктивный игрок находиться в режиме sneaking при нажатии правой кнопки мыши.",
        "type": "text"
      },
      {
        "type": "text",
        "text": "$(#800)setUseCount(<true/false>)/$$(p)Устанавливает, имеет ли Дрон максимальное количество импортируемых/экспортируемых/выбрасываемых предметов. Если true, не забудьте вызвать $(#800)setCount()/$.",
        "title": "setUseCount()"
      },
      {
        "title": "setUseMaxActions()",
        "type": "text",
        "text": "$(#800)setUseMaxActions(<true/false>)/$$(p)Устанавливает, имеет ли Дрон максимальное количество действий, выполняемых на одном блоке до того, как команда считается 'завершенной'. Применяется к действиям \"place\", \"dig\" и \"block_right_click\". Если true, не забудьте вызвать $(#800)setMaxActions()/$."
      },
      {
        "text": "$(#800)setVariable(<variable name>, <x>, <y>, <z>)/$$(p)Устанавливает $(l:programming/variables)переменную/$ для этого Дрона с заданными координатами X/Y/Z. Возможно установить $(l:programming/variables#global)глобальные переменные/$.",
        "type": "text",
        "title": "setVariable()"
      },
      {
        "text": "$(#800)setVariable(<variable name>, <boolean>)/$$(p)Устанавливает $(l:programming/coordinate_operator)переменную/$ для этого Дрона. 'true' соответствует передаче (1,0,0), а 'false' соответствует передаче (0,0,0).",
        "type": "text",
        "title": "setVariable()"
      },
      {
        "type": "text",
        "title": "showArea()",
        "text": "$(#800)showArea()/$$(p)Покажет текущую сохраненную область, используя ту же область рендерера, что и при нажатии $(thing)Show Area/$ в графическом интерфейсе параметров программирования. $(#800)hideArea()/$ можно использовать для скрытия таких областей."
      },
      {
        "type": "crafting",
        "text": "Изготовление интерфейса Дрона",
        "recipe": "pneumaticcraft:drone_interface"
      }      
  ]
}